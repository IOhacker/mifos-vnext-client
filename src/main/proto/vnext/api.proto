syntax = "proto3";

option java_multiple_files = true;
option java_package ="org.mifos.grpc.proto.vnext";
option java_outer_classname = "ApiProto";
import "vnext/common.proto";
import "vnext/als.proto";
import "vnext/transfer.proto";
import "vnext/thirdparty.proto";

service InteropGrpcApi {
    // bidirectional stream start (must be called first
    rpc StartStream(stream StreamFromClientMsg) returns (stream StreamToClientMsg);

    // ALS
    rpc LookupParticipant(LookupParticipantRequest) returns (LookupParticipantResponse);
    rpc LookupParty(LookupPartyRequest) returns (LookupPartyResponse);
    rpc PartyAssociate(PartyAssociateRequest) returns (Empty);
    rpc PartyDissociate(PartyDissociateRequest) returns (PartyDissociateResponse);

    // transfers
    rpc ExecuteTransfer(TransferRequest) returns (TransferResponse);

    // thirdparty
   //rpc GetAvailableDfsps() returns () // maybe not necessary
    rpc GetCustomerAccounts(GetCustomerAccountsRequest) returns (GetCustomerAccountsResponse);

    rpc InitiateOnboard(InitiateOnboardRequest) returns (InitiateOnboardResponse);

    rpc TryConfirmOnboard(TryConfirmOnboardRequest) returns (TryConfirmOnboardResponse);

    rpc GetAccountsBalance(GetAccountsBalanceRequest) returns (GetAccountsBalanceResponse);

    rpc InitiateTransaction(InitiateTransactionRequest) returns (InitiateTransactionResponse);

    rpc GetAccountTransactions(GetAccountTransactionsRequest) returns (GetAccountTransactionsResponse);
}

/*
***************************************
Client to Control Plane Messages
****************************************
*/

message StreamFromClientMsg{
    oneof requestType{
        StreamClientInitialRequest initialRequest = 1;
        StreamClientChallengeResponse challengeResponse = 2;

        LookupPartyResponse lookupPartyInfoResponse = 3;
        // add a method to send the client stats to the backend

        // transfer request/prepare responses
        ServerAcceptTransferResponse acceptTransferResponse = 4;

        // thirdparty request/prepare responses
        ServerGetCustomerAccountsResponse getCustomerAccountsResponse = 5;
        ServerInitiateOnboardResponse initiateOnboardResponse = 6;
        ServerTryConfirmOnboardResponse tryConfirmOnboardResponse = 7;
        ServerGetAccountsBalanceResponse getAccountsBalanceResponse = 8;
        ServerInitiateTransactionResponse initiateTransactionResponse = 9;
        ServerGetAccountTransactionsResponse getAccountTransactionsResponse = 10;

        // Generic error - client sends this when error is detected reading
        // server stream message
        StreamMessageError streamMessageError = 11;
    }
    // unique message id defined by the sender
    string streamMessageId = 50;
    optional string pendingRequestId = 51;
}

// initial message all clients must send to register,
// will be responded with GrpcInitialResponseToClient
message StreamClientInitialRequest{
    string fspId = 1;
    optional string clientName = 2;
    string clientVersion = 4;
    bool mainClient = 5;
    string clientPem = 6;
}

message StreamClientChallengeResponse{
    string signedNonce = 1;
    string pubKeyFingerprint = 2; // TODO
}

/*
***************************************
ControlPlane to Client Messages
***************************************
*/
message StreamToClientMsg{
    oneof responseType{
        //Empty initialResponse = 1;
        // add a method to receive stats from the backend
        //ServerPartyInfoRequest partyInfoRequest = 2;

        //ServerAcceptTransferRequest acceptTransferRequest = 3;

        //TransferPreparedEvt transferPreparedEvt = 4;
        StreamServerInitialResponse initialResponse = 1;
        StreamServerReadyResponse readyResponse = 2;
        // add a method to receive stats from the backend

        // Account Lookup
        ServerPartyInfoRequest partyInfoRequest = 3;

        // Transfers
        ServerAcceptTransferRequest acceptTransferRequest = 4;

        // PISP
        ServerGetCustomerAccountsRequest getCustomerAccountsRequest = 5;
        ServerInitiateOnboardRequest initiateOnboardRequest = 6;
        ServerTryConfirmOnboardRequest tryConfirmOnboardRequest = 7;
        ServerGetAccountsBalanceRequest getAccountsBalanceRequest = 8;
        ServerInitiateTransactionRequest initiateTransactionRequest = 9;
        ServerGetAccountTransactionsRequest getAccountTransactionsRequest = 10;

        // Generic error - server sends this when error is detected reading
        // client stream message
        StreamMessageError streamMessageError = 11;
    }
    // unique message id defined by the sender
    string streamMessageId = 50;
    optional string pendingRequestId = 51;
}
message StreamServerInitialResponse{
    //string clientId = 1;
    string signedClientId = 1;
    string challengeNonce = 2;
    string pubKeyFingerprint = 3;
}

message StreamServerReadyResponse{
    string sessionSecret = 1;
}

